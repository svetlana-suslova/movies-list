[{"/Users/stellar/Documents/BITBUCKET/my-movie-list/src/index.js":"1","/Users/stellar/Documents/BITBUCKET/my-movie-list/src/services/movieServiceStubs.ts":"2","/Users/stellar/Documents/BITBUCKET/my-movie-list/src/components/App.tsx":"3","/Users/stellar/Documents/BITBUCKET/my-movie-list/src/components/common/Buttons.tsx":"4","/Users/stellar/Documents/BITBUCKET/my-movie-list/src/components/bars/SearchBar.tsx":"5","/Users/stellar/Documents/BITBUCKET/my-movie-list/src/components/bars/FilterBar.tsx":"6","/Users/stellar/Documents/BITBUCKET/my-movie-list/src/components/bars/SortingBar.tsx":"7","/Users/stellar/Documents/BITBUCKET/my-movie-list/src/components/bars/Paginator.tsx":"8","/Users/stellar/Documents/BITBUCKET/my-movie-list/src/components/common/NoMovie.tsx":"9","/Users/stellar/Documents/BITBUCKET/my-movie-list/src/components/Movie.tsx":"10","/Users/stellar/Documents/BITBUCKET/my-movie-list/src/components/common/Confirm.tsx":"11","/Users/stellar/Documents/BITBUCKET/my-movie-list/src/components/MovieModal.tsx":"12","/Users/stellar/Documents/BITBUCKET/my-movie-list/src/components/common/DropDown.tsx":"13","/Users/stellar/Documents/BITBUCKET/my-movie-list/src/components/common/Inputs.tsx":"14"},{"size":317,"mtime":1610962960490,"results":"15","hashOfConfig":"16"},{"size":3874,"mtime":1611250173954,"results":"17","hashOfConfig":"16"},{"size":8612,"mtime":1611253282843,"results":"18","hashOfConfig":"16"},{"size":2040,"mtime":1611248827943,"results":"19","hashOfConfig":"16"},{"size":1715,"mtime":1611247310522,"results":"20","hashOfConfig":"16"},{"size":641,"mtime":1611247307145,"results":"21","hashOfConfig":"16"},{"size":772,"mtime":1611245351487,"results":"22","hashOfConfig":"16"},{"size":1773,"mtime":1611247314255,"results":"23","hashOfConfig":"16"},{"size":677,"mtime":1611250158947,"results":"24","hashOfConfig":"16"},{"size":2618,"mtime":1611248855003,"results":"25","hashOfConfig":"16"},{"size":1324,"mtime":1611254323646,"results":"26","hashOfConfig":"16"},{"size":5798,"mtime":1611253783045,"results":"27","hashOfConfig":"16"},{"size":1538,"mtime":1611254793877,"results":"28","hashOfConfig":"16"},{"size":4843,"mtime":1611256052275,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"17vi6jw",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"35"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"35"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/stellar/Documents/BITBUCKET/my-movie-list/src/index.js",[],["62","63"],"/Users/stellar/Documents/BITBUCKET/my-movie-list/src/services/movieServiceStubs.ts",[],["64","65"],"/Users/stellar/Documents/BITBUCKET/my-movie-list/src/components/App.tsx",["66"],"import React, {useState, useEffect} from 'react';\nimport {getMovies, getGenres, saveMovie, deleteMovie} from '../services/movieServiceStubs';\nimport {MovieType} from '../types/types';\nimport Movie from './Movie';\nimport NoMovie from './common/NoMovie';\nimport SortingBar from './bars/SortingBar';\nimport FilterBar from './bars/FilterBar';\nimport SearchBar from './bars/SearchBar';\nimport Paginator from './bars/Paginator';\nimport styled from 'styled-components';\nimport MovieModal from './MovieModal';\nimport { PlusButton } from './common/Buttons';\nimport Confirm from './common/Confirm';\nimport toastr from 'toastr';\n\nconst AppWrapper = styled.div`\n   padding: 5px;\n   margin-top: 20px;\n`;\n\nconst MovieList = styled.div`\n    padding-top: 10px;\n    margin-top: 20px;\n    background-color: #F8F8F8;\n`;\n\nconst App = () =>  { \n\n    type State = {\n        movies: Array<MovieType>,\n        genres: Array<string>,\n        pages: Array<number>,\n        sortingMethod: string,\n        filterMethod: string,\n        searchStr: string,\n        activePage: number,\n        portionCount: number | null,\n        portionNumber: number,\n        movieToEdit: MovieType | null,\n        movieToDelete: MovieType | null,\n        modal: boolean,\n        confirm: boolean\n    }\n\n    const [state, setState] = useState<State>({\n        movies: [],\n        genres: [],\n        pages: [],\n        sortingMethod: 'title',\n        filterMethod: '',\n        searchStr: '',\n        activePage: 1,\n        portionCount: null,\n        portionNumber: 1,\n        movieToEdit: null,\n        movieToDelete: null,\n        modal: false,\n        confirm: false\n      });\n\n    const { movies, genres, pages, sortingMethod, filterMethod, searchStr, activePage, portionCount, \n        portionNumber, movieToEdit, movieToDelete, modal, confirm } = state;\n\n    useEffect(() => {\n        getGenres()\n        .then(genres => {\n            setState(state => ({\n                ...state,\n                genres\n                }));\n            });\n            loadData();\n            console.log(\"pages\"+ pages)\n    }, [sortingMethod, filterMethod, searchStr, activePage, portionNumber]);\n\n    const loadData = () => {\n        getMovies(sortingMethod, filterMethod, searchStr, activePage, portionNumber)\n        .then((data: any) => {\n            setState(state => ({\n                ...state,\n                movies: data.movieItems,\n                pages: data.pages,\n                portionCount: data.portionCount\n              }));\n        });\n    }\n\n    const sortBy = (key: string) => {\n        setState(state => ({\n            ...state,\n            sortingMethod: key,\n            activePage: 1,\n            portionNumber: 1\n        }));\n    }\n\n    const filterBy = (key: string) => {\n        if (key !== 'ALL') {\n            setState((state) => ({\n                ...state,\n                filterMethod: key,\n                activePage: 1,\n                portionNumber: 1\n            }));\n        } else {\n            setState(state => ({\n                ...state,\n                filterMethod: '',\n                activePage: 1,\n                portionNumber: 1\n            }));\n        }\n    }\n\n    const search = (key: string) => {\n        if ( !(key.trim() === '') ) {\n            setState(state => ({\n                ...state,\n                searchStr: key,\n                activePage: 1,\n                portionNumber: 1\n            })); \n        }  \n    }\n\n    const clearSearch = () => {\n        setState(state => ({\n            ...state,\n            searchStr: '',\n            activePage: 1,\n            portionNumber: 1\n        }));\n    }\n\n    const selectPage = (key: number) =>  {\n        setState(state => ({\n            ...state,\n            activePage: key\n        }));\n    }\n\n    const setPortionNumber = (key: number) => {\n        setState(state => ({\n            ...state,\n            portionNumber: key\n        }));\n    }\n\n    const createNewMovie = () => {\n        // @ts-ignore\n        setState(state => ({\n            ...state,\n            movieToEdit: {\n                title: '',\n                year: 2021,\n                runtime: 120,\n                genres: [],\n                director: '',\n                actors: '',\n                plot: '',\n                posterUrl: 'https://images5.fanpop.com/image/photos/24600000/The-Mask-the-mask-24621712-336-475.jpg'\n            },\n            modal: !modal\n        }));\n    }\n\n    const cancelEditMovie = () => {\n        setState(state => ({\n            ...state,\n            movieToEdit: null,\n            modal: !modal\n        }));\n    }\n\n    const updateMovieToEditOnChange = (field: string, value: string | number) => {\n        let movie = movieToEdit;\n        // @ts-ignore\n        movie[field] = value;\n        return setState(state => ({\n            ...state,\n            movieToEdit: movie\n        }));\n    }\n\n    const onSaveMovie = () => {\n        const movie = movieToEdit;\n        setState(state => ({\n            ...state,\n            movieToEdit: null,\n            modal: !modal\n        }));\n        if (movie) saveMovie(movie)\n            .then(() => {\n                toastr.success('Movie was saved!');\n                loadData();\n            });\n    }\n\n    const updateMovie = (movie: MovieType) => {\n        setState(state => ({\n            ...state,\n            movieToEdit: Object.assign({}, movie),\n            modal: !modal\n        }));\n    }\n\n    const setMovieToDelete = (key: MovieType) => {\n        setState(state => ({\n            ...state,\n            movieToDelete: key,\n            confirm: !confirm\n        }));\n    }\n\n    const cancelDeleteMovie = () => {\n        setState(state => ({\n            ...state,\n            movieToDelete: null,\n            confirm: !confirm\n        }));\n    }\n\n    const onDeleteMovie = () => {\n        if (movieToDelete) deleteMovie(movieToDelete.id)\n            .then(() => {\n                toastr.error('Movie was deleted!');\n                setState(state => ({\n                    ...state,\n                    movieToDelete: null,\n                    confirm: !confirm\n                }));\n                loadData();\n            });\n    }\n\n    return (\n            <AppWrapper>\n                { movies\n                ? <>\n                    <div className=\"container\">\n                        <div className=\"row justify-content-between\">\n                            <SortingBar className=\"col-2\" \n                            sortingMethod={sortingMethod}\n                            sortBy={sortBy}/>\n                            <Paginator className=\"col-10\" \n                            activePage={activePage}\n                            portionCount={portionCount}\n                            selectPage={selectPage}\n                            pages={pages} \n                            portionNumber={portionNumber} \n                            setPortionNumber={setPortionNumber}/>\n                        </div>\n                        <div className=\"row justify-content-between\">\n                            <SearchBar className=\"col-6\"\n                            search={search}\n                            clearSearch={clearSearch}/>\n                            <FilterBar className=\"col-4\"\n                            genres={genres}\n                            filterMethod={filterMethod}\n                            filterBy={filterBy}/>\n                            <PlusButton className=\"col-2\"\n                            color=\"success\" \n                            onClickMethod={createNewMovie}\n                            title=\"+\"/>\n                        </div> \n                    </div>\n                    <MovieList className=\"container\">\n                        {\n                            movies.map(m => <Movie key={m.id}\n                            movie={m} \n                            updateMovie={updateMovie}\n                            setMovieToDelete={setMovieToDelete}/> )\n                        }\n                    </MovieList>\n                    <MovieModal\n                    modal={modal}\n                    movie={movieToEdit} \n                    cancelEditMovie={cancelEditMovie}\n                    onChangeMovie={updateMovieToEditOnChange}\n                    saveMovie={onSaveMovie}\n                    genres={genres}/>\n                    <Confirm\n                    confirm={confirm}\n                    cancelDeleteMovie={cancelDeleteMovie}\n                    deleteMovie={onDeleteMovie}\n                    movie={movieToDelete}/>\n                </>\n            : <NoMovie /> }\n        </AppWrapper>\n    );\n}\n\nexport default App;","/Users/stellar/Documents/BITBUCKET/my-movie-list/src/components/common/Buttons.tsx",[],"/Users/stellar/Documents/BITBUCKET/my-movie-list/src/components/bars/SearchBar.tsx",[],"/Users/stellar/Documents/BITBUCKET/my-movie-list/src/components/bars/FilterBar.tsx",[],"/Users/stellar/Documents/BITBUCKET/my-movie-list/src/components/bars/SortingBar.tsx",[],"/Users/stellar/Documents/BITBUCKET/my-movie-list/src/components/bars/Paginator.tsx",[],"/Users/stellar/Documents/BITBUCKET/my-movie-list/src/components/common/NoMovie.tsx",[],"/Users/stellar/Documents/BITBUCKET/my-movie-list/src/components/Movie.tsx",["67","68"],"import React from 'react';\nimport styled from 'styled-components';\nimport { EditButton, DeleteButton } from './common/Buttons';\nimport noMovie from '../assets/no-movie.png';\nimport {MovieType} from '../types/types';\n\nconst MovieRow = styled.div`\n    font-size: 15px;\n    border-bottom: 1px dotted #cacaca;\n    clear: both;\n    margin: 10px 0;\n`;\nconst MovieImage = styled.div`\n    float: left;\n    position: relative;\n    margin: 0 10px 0 0;\n    background-color: #eee;\n    border: 1px solid rgba(0,0,0,0.1);\n    img {\n        width: 96px;\n        height: 142px;\n    } \n`;\nconst MovieInfo = styled.div`\n    font-size: 12px;\n    text-align: left;\n    font-family: Verdana, Arial, sans-serif;\n    color: #333;\n    p span::before {\n        content: \" | \";\n        color: #ddd;\n    }\n`;\nconst MovieTitle = styled.h3`\n    font-size: 17px;\n    margin: 10px 0 0 0;\n    color: #337ab7;\n    a {\n        cursor: pointer;\n    }\n`;\nconst MovieDetails = styled.p`\n\n`;\nconst MovieActors = styled.p`\n    margin-top: 8px;\n    color: #337ab7;\n`;\nconst MoviePlot = styled.p`\n    position: relative;\n    line-height: 1.4em;\n    min-height: 3.2em;\n    text-align: justify;\n    font-size: 14px;\n`;\n\ntype PropsType = {\n    movie: MovieType,\n    updateMovie: (movie: MovieType) => void,\n    setMovieToDelete: (movie: MovieType) => void\n}\n\nconst Movie: React.FC<PropsType> = ( {movie, updateMovie, setMovieToDelete} ) => {\n    const imgUrl = movie.posterUrl ? movie.posterUrl : noMovie;\n    return (   \n        <MovieRow key={movie.id}>\n            <MovieImage>\n                <img src={imgUrl} title={movie.title}/>\n            </MovieImage>\n            <MovieInfo>\n                <MovieTitle className=\"row justify-content-around\">\n                    <div className=\"col-10\">\n                        <a onClick={() => updateMovie(movie)}>{movie.title}</a>\n                    </div>\n                    <div className=\"col-2\">\n                        <EditButton onClickMethod={() => updateMovie(movie)}/>\n                        <DeleteButton onClickMethod={() => setMovieToDelete(movie)}/>\n                    </div>\n                </MovieTitle>\n                <MovieDetails>\n                    {movie.year}\n                    <span>{movie.runtime + ' min.'}</span>\n                    <span>{movie.genres.join(', ')}</span>\n                </MovieDetails>\n                <MovieActors>\n                    {movie.director}\n                    <span>{movie.actors}</span>\n                </MovieActors>\n                <MoviePlot>{movie.plot}</MoviePlot>\n            </MovieInfo>\n        </MovieRow>\n    );\n}\n\nexport default Movie;","/Users/stellar/Documents/BITBUCKET/my-movie-list/src/components/common/Confirm.tsx",[],"/Users/stellar/Documents/BITBUCKET/my-movie-list/src/components/MovieModal.tsx",[],"/Users/stellar/Documents/BITBUCKET/my-movie-list/src/components/common/DropDown.tsx",[],"/Users/stellar/Documents/BITBUCKET/my-movie-list/src/components/common/Inputs.tsx",[],{"ruleId":"69","replacedBy":"70"},{"ruleId":"71","replacedBy":"72"},{"ruleId":"69","replacedBy":"70"},{"ruleId":"71","replacedBy":"72"},{"ruleId":"73","severity":1,"message":"74","line":74,"column":8,"nodeType":"75","endLine":74,"endColumn":75,"suggestions":"76"},{"ruleId":"77","severity":1,"message":"78","line":68,"column":17,"nodeType":"79","endLine":68,"endColumn":56},{"ruleId":"80","severity":1,"message":"81","line":73,"column":25,"nodeType":"79","endLine":73,"endColumn":63},"no-native-reassign",["82"],"no-negated-in-lhs",["83"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'loadData' and 'pages'. Either include them or remove the dependency array.","ArrayExpression",["84"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","no-global-assign","no-unsafe-negation",{"desc":"85","fix":"86"},"Update the dependencies array to be: [sortingMethod, filterMethod, searchStr, activePage, portionNumber, loadData, pages]",{"range":"87","text":"88"},[2074,2141],"[sortingMethod, filterMethod, searchStr, activePage, portionNumber, loadData, pages]"]